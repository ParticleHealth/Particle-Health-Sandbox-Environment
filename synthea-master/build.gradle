/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'signing'


// In this section you declare where to find the dependencies of your project
repositories {
  // Use jcenter for resolving your dependencies.
  // You can declare any Maven/Ivy/file repository here.
  jcenter()
  mavenCentral()
  maven {
    url "https://oss.sonatype.org/content/repositories/snapshots"
  }
}

checkstyle {
  toolVersion '8.4'
  //showViolations = true
}

dependencies {
  // This dependency is found on compile classpath of this component and consumers.
  compile 'com.google.code.gson:gson:2.8.0'
  compile 'com.jayway.jsonpath:json-path:2.4.0'
  compile 'ca.uhn.hapi.fhir:hapi-fhir-base:4.1.0'
  compile 'ca.uhn.hapi.fhir:hapi-fhir-structures-dstu3:4.1.0'
  compile 'ca.uhn.hapi.fhir:hapi-fhir-structures-dstu2:4.1.0'
  compile 'ca.uhn.hapi.fhir:hapi-fhir-structures-r4:4.1.0'
  compile 'ca.uhn.hapi.fhir:hapi-fhir-client:4.1.0'
  // C-CDA export uses Apache FreeMarker templates
  compile 'org.freemarker:freemarker:2.3.26-incubating'
  compile group: 'com.h2database', name: 'h2', version: '1.4.196'
  // google guava for some data structures
  compile 'com.google.guava:guava:23.0'
  compile group: 'guru.nidi', name: 'graphviz-java', version: '0.2.2'
  // CSV Stuff
  compile group: 'org.apache.commons', name: 'commons-csv', version: '1.5'
  compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: '2.8.8'
  compile group: 'org.yaml', name: 'snakeyaml', version: '1.25'
  compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
  compile group: 'org.apache.commons', name: 'commons-text', version: '1.2'

  compile group: 'org.opencds.cqf', name: 'cql-engine', version: '1.3.12'
  compile group: 'info.cqframework', name: 'cql', version: '1.3.17'
  compile group: 'info.cqframework', name: 'model', version: '1.3.17'
  compile group: 'info.cqframework', name: 'cql-to-elm', version: '1.3.17'

  // Java 9 no longer includes these APIs by default
  compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'
  compile 'org.glassfish.jaxb:jaxb-runtime:2.3.0'
  compile 'javax.activation:activation:1.1.1'

  // get rid of SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
  // if we switch to a real logging framework we may want to switch this
  compile "org.slf4j:slf4j-api:1.6.1"
  // compile "org.slf4j:slf4j-nop:1.6.1" // SLF4J seems to already be provided by org.apache.logging.log4j
  
  // Physiology simulation dependencies
  compile files('lib/sbscl/SimulationCoreLibrary_v1.5_slim.jar')
  compile group: 'org.sbml.jsbml', name: 'jsbml', version: '1.4', {
      exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
  }
  compile group: 'org.apache.commons', name: 'commons-math', version: '2.2'
  
  // JfreeChart for drawing physiology charts
  compile group: 'org.jfree', name: 'jfreechart', version: '1.5.0'

  // Use JUnit test framework
  testCompile 'junit:junit:4.12'
  testCompile fileTree(dir: 'lib/mdhtruntime/mdht', include: '*.jar')
  testCompile fileTree(dir: 'lib/mdhtruntime/non-mdht', include: '*.jar')
  testCompile 'org.mockito:mockito-core:2.19.0'
  testCompile 'org.powermock:powermock-module-junit4:1.7.1'
  testCompile 'org.powermock:powermock-api-mockito2:1.7.1'
  testCompile 'com.github.tomakehurst:wiremock-jre8:2.26.3'
  testCompile 'ca.uhn.hapi.fhir:hapi-fhir-validation:4.1.0'
  testCompile 'ca.uhn.hapi.fhir:hapi-fhir-validation-resources-dstu3:4.1.0'
  testCompile 'ca.uhn.hapi.fhir:hapi-fhir-validation-resources-dstu2:4.1.0'
  testCompile 'ca.uhn.hapi.fhir:hapi-fhir-validation-resources-r4:4.1.0'
  testCompile 'com.helger:ph-schematron:5.0.4'
  testCompile 'com.helger:ph-commons:9.1.1'
}

// Provide more descriptive test failure output
test {
  testLogging {
    exceptionFormat = 'full'
    // showExceptions = true
    // showCauses = true
    // showStackTraces = true
    // showStandardStreams = true
  }
  maxHeapSize = "2048m"
}

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    // commons-io used in getting the version id below
    classpath group: 'commons-io', name: 'commons-io', version: '2.5'
    // note that commons-io is already a dependency
    // of commons-csv in the primary dependencies above
  }
}

jacocoTestReport {
  reports {
    xml.enabled true
    html.enabled true
  }
}

check.dependsOn jacocoTestReport

task graphviz(type: JavaExec) {
  group 'Application'
  description 'Generate rule visualization'
  classpath sourceSets.main.runtimeClasspath
  main = "Graphviz"
}

task uberJar(type: Jar) {
    def versionFile = new File("$projectDir/src/main/resources/version.txt")
    def versionText = "N/A"
    if (versionFile.exists()) {
      versionText = versionFile.text.trim()
    }
    manifest {
        attributes(
            'Main-Class'     : 'App',
            'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
            'Build-Version'  : versionText,
            'Created-By'     : "Gradle ${gradle.gradleVersion}",
            'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
            'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        )
    }
    baseName = 'synthea-with-dependencies'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task concepts(type: JavaExec) {
  group 'Application'
  description 'Create a list of simulated concepts'
  classpath sourceSets.main.runtimeClasspath
  main = "org.mitre.synthea.helpers.Concepts"
}

task attributes(type: JavaExec) {
  group 'Application'
  description 'Create a list of patient attributes'
  classpath sourceSets.main.runtimeClasspath
  main = "org.mitre.synthea.helpers.Attributes"
}

task overrides(type: JavaExec) {
  group 'Application'
  description 'Create a list of modules parameters in module override format'
  classpath sourceSets.main.runtimeClasspath
  main = "org.mitre.synthea.helpers.ModuleOverrides"
  doFirst {
    // TODO: is there a way to make this cleaner?
    String includeFields = project.hasProperty('includeFields') ? project.getProperty('includeFields') : ""
    String includeModules = project.hasProperty('includeModules') ? project.getProperty('includeModules') : ""
    String excludeFields = project.hasProperty('excludeFields') ? project.getProperty('excludeFields') : ""
    String excludeModules = project.hasProperty('excludeModules') ? project.getProperty('excludeModules') : ""

    args(includeFields, includeModules, excludeFields, excludeModules)
  }
}

task physiology(type: JavaExec) {
    group 'Application'
    description 'Test a physiology simulation'
    classpath sourceSets.main.runtimeClasspath
    main = "org.mitre.synthea.engine.PhysiologySimulator"
}

task versionTxt() {
  group 'Build'
  description 'Generates a version file.'
  doLast {
    try {
      // the ruby version uses `git rev-parse HEAD` which just produces the long commit hash.
      // "git describe" can use tags or fallback to the commit hash if necessary.
      // this assumes (as does the ruby version) that git will always be present when building
      String[] cmd = ["git", "describe", "--tags", "--always"]
      Process p = Runtime.getRuntime().exec(cmd)
      p.waitFor()
      def version = org.apache.commons.io.IOUtils.toString(p.getInputStream(), java.nio.charset.StandardCharsets.UTF_8)
      def file = new File("$projectDir/src/main/resources/version.txt")
      file.createNewFile()
      file.text = version
    } catch (e) {
      // ex. if git is not installed, or if we can't write the file for some reason. it's not critical to the execution so don't crash
      logger.warn("Warning: unable to create version.txt. Generated records will not indicate which version of Synthea was used to create them.")
      logger.warn(e.getMessage())
    }
  }
}

compileJava.dependsOn versionTxt
uberJar.dependsOn versionTxt

task cleanOutput {
  doLast {
    delete fileTree(dir: 'output', include: '**/*')
  }
}

// Define the main class for the application
mainClassName = 'App'

run {
  // args are called "arams" because they are called with -P,
  // ex. gradle run -Params="['arg1', 'args2']"
  // see https://stackoverflow.com/questions/27604283/gradle-task-pass-arguments-to-java-application
  if (project.hasProperty("arams")) {
    args Eval.me(arams)
  }
  def maxHeapSizeVar = System.getenv("MAX_HEAP_SIZE")
  if (maxHeapSizeVar != null) {
    maxHeapSize = maxHeapSizeVar
  }
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

def mavenGroup = 'org.mitre.synthea'
def mavenVersion = '2.6.0-SNAPSHOT'

publishing {
    publications {
        synthea(MavenPublication) {
            groupId mavenGroup
            version mavenVersion
            from components.java
            
            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }
            pom {
                name = 'Synthea'
                description = 'Synthetic Patient Population Simulator'
                url = 'https://github.com/synthetichealth/synthea'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/synthetichealth/synthea.git'
                    developerConnection = 'scm:git:ssh://github.com:synthetichealth/synthea.git'
                    url = 'http://github.com/synthetichealth/synthea/tree/master'
                }
                developers {
                    developer {
                        name = 'Jason Walonoski'
                        email = 'jwalonoski@mitre.org'
                        organization = 'The MITRE Corporation'
                        organizationUrl = 'http://www.mitre.org/'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def snapshotUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
            def releaseUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            url mavenVersion.endsWith('SNAPSHOT') ? snapshotUrl : releaseUrl
            credentials {
                def user = project.hasProperty('sonatypeUsername') ? sonatypeUsername : ''
                def pw = project.hasProperty('sonatypePassword') ? sonatypePassword : ''
                username user
                password pw 
            }
        }
    }
}

signing {
  required { project.hasProperty('signing.keyId') }
  sign publishing.publications.synthea
}
